// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "fastcats_types.h"
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// categorize_rcpp
List categorize_rcpp();
RcppExport SEXP _fastcats_categorize_rcpp() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(categorize_rcpp());
    return rcpp_result_gen;
END_RCPP
}
// fastIntToStringRcpp
CharacterVector fastIntToStringRcpp(IntegerVector x);
RcppExport SEXP _fastcats_fastIntToStringRcpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(fastIntToStringRcpp(x));
    return rcpp_result_gen;
END_RCPP
}
// matMulWide
LogicalMatrix matMulWide(const DataFrame& data, const List& map, const std::string id_name, const CV code_names, const bool validate);
RcppExport SEXP _fastcats_matMulWide(SEXP dataSEXP, SEXP mapSEXP, SEXP id_nameSEXP, SEXP code_namesSEXP, SEXP validateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const List& >::type map(mapSEXP);
    Rcpp::traits::input_parameter< const std::string >::type id_name(id_nameSEXP);
    Rcpp::traits::input_parameter< const CV >::type code_names(code_namesSEXP);
    Rcpp::traits::input_parameter< const bool >::type validate(validateSEXP);
    rcpp_result_gen = Rcpp::wrap(matMulWide(data, map, id_name, code_names, validate));
    return rcpp_result_gen;
END_RCPP
}
// factorNoSort
IntegerVector factorNoSort(const CharacterVector& x, const CharacterVector& levels, const bool na_rm);
RcppExport SEXP _fastcats_factorNoSort(SEXP xSEXP, SEXP levelsSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const CharacterVector& >::type levels(levelsSEXP);
    Rcpp::traits::input_parameter< const bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(factorNoSort(x, levels, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// refactor
IntegerVector refactor(const IntegerVector& x, const CV& new_levels, const bool exclude_na, const bool validate);
RcppExport SEXP _fastcats_refactor(SEXP xSEXP, SEXP new_levelsSEXP, SEXP exclude_naSEXP, SEXP validateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const CV& >::type new_levels(new_levelsSEXP);
    Rcpp::traits::input_parameter< const bool >::type exclude_na(exclude_naSEXP);
    Rcpp::traits::input_parameter< const bool >::type validate(validateSEXP);
    rcpp_result_gen = Rcpp::wrap(refactor(x, new_levels, exclude_na, validate));
    return rcpp_result_gen;
END_RCPP
}
// refactor_narm
IntegerVector refactor_narm(const IntegerVector& x, const CV& new_levels, const bool validate);
RcppExport SEXP _fastcats_refactor_narm(SEXP xSEXP, SEXP new_levelsSEXP, SEXP validateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const CV& >::type new_levels(new_levelsSEXP);
    Rcpp::traits::input_parameter< const bool >::type validate(validateSEXP);
    rcpp_result_gen = Rcpp::wrap(refactor_narm(x, new_levels, validate));
    return rcpp_result_gen;
END_RCPP
}
// factorIsValid
bool factorIsValid(const IntegerVector& f);
RcppExport SEXP _fastcats_factorIsValid(SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type f(fSEXP);
    rcpp_result_gen = Rcpp::wrap(factorIsValid(f));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_fastcats_categorize_rcpp", (DL_FUNC) &_fastcats_categorize_rcpp, 0},
    {"_fastcats_fastIntToStringRcpp", (DL_FUNC) &_fastcats_fastIntToStringRcpp, 1},
    {"_fastcats_matMulWide", (DL_FUNC) &_fastcats_matMulWide, 5},
    {"_fastcats_factorNoSort", (DL_FUNC) &_fastcats_factorNoSort, 3},
    {"_fastcats_refactor", (DL_FUNC) &_fastcats_refactor, 4},
    {"_fastcats_refactor_narm", (DL_FUNC) &_fastcats_refactor_narm, 3},
    {"_fastcats_factorIsValid", (DL_FUNC) &_fastcats_factorIsValid, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_fastcats(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
